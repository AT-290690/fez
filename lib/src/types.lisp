(the char:A Number)
(the char:B Number)
(the char:C Number)
(the char:D Number)
(the char:E Number)
(the char:F Number)
(the char:G Number)
(the char:H Number)
(the char:I Number)
(the char:J Number)
(the char:K Number)
(the char:L Number)
(the char:M Number)
(the char:N Number)
(the char:O Number)
(the char:P Number)
(the char:Q Number)
(the char:R Number)
(the char:S Number)
(the char:T Number)
(the char:U Number)
(the char:V Number)
(the char:W Number)
(the char:X Number)
(the char:Y Number)
(the char:Z Number)
(the char:a Number)
(the char:b Number)
(the char:c Number)
(the char:d Number)
(the char:e Number)
(the char:f Number)
(the char:g Number)
(the char:h Number)
(the char:i Number)
(the char:j Number)
(the char:k Number)
(the char:l Number)
(the char:m Number)
(the char:n Number)
(the char:o Number)
(the char:p Number)
(the char:q Number)
(the char:r Number)
(the char:s Number)
(the char:t Number)
(the char:u Number)
(the char:v Number)
(the char:w Number)
(the char:x Number)
(the char:y Number)
(the char:z Number)
(the char:0 Number)
(the char:1 Number)
(the char:2 Number)
(the char:3 Number)
(the char:4 Number)
(the char:5 Number)
(the char:6 Number)
(the char:7 Number)
(the char:8 Number)
(the char:9 Number)
(the char:empty Number)
(the char:double-quote Number)
(the char:new-line Number)
(the char:space Number)
(the char:comma Number)
(the char:dot Number)
(the char:semi-colon Number)
(the char:colon Number)
(the char:dash Number)
(the char:left-brace Number)
(the char:right-brace Number)
(the char:curly-left-brace Number)
(the char:curly-right-brace Number)
(the char:left-bracket Number)
(the char:right-bracket Number)
(the char:pipe Number)
(the char:hash Number)
(the char:question-mark Number)
(the char:exclamation-mark Number)
(the char:minus Number)
(the char:plus Number)
(the char:equal Number)
(the char:asterix Number)
(the char:ampersand Number)
(the char:at Number)
(the char:backtick Number)
(the char:digit? (lambda Number (do Boolean)))
(the char:upper (lambda Number (do Number)))
(the char:lower (lambda Number (do Number)))
(the nil Number)
(the identity (lambda Unknown (do Unknown)))
(the Scope Number)
(the Special Number)
(the Library Number)
(the Type Number)
(the Search Number)
(the truthy? (lambda Unknown (do Boolean)))
(the falsy? (lambda Unknown (do Boolean)))
(the true? (lambda Unknown (do Boolean)))
(the false? (lambda Unknown (do Boolean)))
(the true Boolean)
(the false Boolean)
(the one Number)
(the zero Number)
(the math:e Number)
(the math:pi Number)
(the math:tau Number)
(the math:min-safe-integer Number)
(the math:max-safe-integer Number)
(the math:decimal-scaling Number)
(the math:infinity Number)
(the pair:apply (lambda Unknown[] (lambda Unknown Unknown (do Unknown)) (do Unknown)))
(the pair:apply-last (lambda Unknown[] (lambda Unknown (do Unknown)) (do Unknown[])))
(the pair:apply-first (lambda Unknown[] (lambda Unknown (do Unknown)) (do Unknown[])))
(the pair:equal? (lambda Unknown[] (do Boolean)))
(the pair:fork-apply (lambda Unknown[] (lambda Unknown (do Unknown)) (lambda Unknown (do Unknown)) (do Unknown[])))
(the pair:add (lambda Unknown[] (do Number)))
(the pair:subtract (lambda Unknown[] (do Number)))
(the pair:multiply (lambda Unknown[] (do Number)))
(the pair:divide (lambda Unknown[] (do Number)))
(the pair:swap (lambda Unknown[] (do Unknown[])))
(the pair:duplicate (lambda Unknown (do Unknown[])))
(the pair:swap! (lambda Unknown[] (do Unknown[])))
(the pair:unzip (lambda Unknown[] (do Unknown[][])))
(the pair:zip (lambda Unknown[] (do Unknown[][])))
(the pair:list-zip (lambda Unknown[] (do Unknown[])))
(the pair:list-unzip (lambda Unknown[] (do Unknown[])))
(the math:range-exclusive (lambda Number Number (do Number[])))
(the math:range (lambda Number Number (do Number[])))
(the math:sequence (lambda Unknown[] (do Number[])))
(the math:sequence-n (lambda Number (do Number[])))
(the math:zeroes (lambda Number (do Number[])))
(the math:ones (lambda Number (do Number[])))
(the math:numbers (lambda Number Unknown (do Unknown[])))
(the math:range-steps (lambda Number Number Number (do Number[])))
(the math:between? (lambda Number Number Number (do Boolean)))
(the math:overlap? (lambda Number Number Number (do Boolean)))
(the math:bionomial-coefficient (lambda Number Number (do Number)))
(the math:number-of-permutations (lambda Number Number (do Number)))
(the math:permutations (lambda Unknown[] (do Unknown[][])))
(the math:combinations (lambda Unknown[] (do Unknown[][])))
(the math:combinations-n (lambda Unknown[] Number (do Unknown[][])))
(the math:variants (lambda Unknown[] Number (do Unknown[][])))
(the math:subset (lambda Unknown[] (do Unknown[][])))
(the math:greater? (lambda Number Number (do Boolean)))
(the math:lesser? (lambda Number Number (do Boolean)))
(the math:lesser-or-equal? (lambda Number Number (do Boolean)))
(the math:greater-or-equal? (lambda Number Number (do Boolean)))
(the math:equal? (lambda Number Number (do Boolean)))
(the math:addition (lambda Number Number (do Number)))
(the math:multiplication (lambda Number Number (do Number)))
(the math:division (lambda Number Number (do Number)))
(the math:subtraction (lambda Number Number (do Number)))
(the math:reverse (lambda Number[] (do Number[])))
(the math:fold (lambda Number[] (lambda Number Number (do Number)) Number (do Number)))
(the math:enumerated-fold (lambda Number[] (lambda Number Number Number (do Number)) Number (do Number)))
(the math:map (lambda Number[] (lambda Number (do Number)) (do Number[])))
(the math:enumerated-map (lambda Number[] (lambda Number Number (do Number)) (do Number[])))
(the math:select (lambda Number[] (lambda Number (do Boolean)) (do Number[])))
(the math:exclude (lambda Number[] (lambda Number (do Boolean)) (do Number[])))
(the math:every? (lambda Number[] (lambda Number (do Boolean)) (do Boolean)))
(the math:some? (lambda Number[] (lambda Number (do Boolean)) (do Boolean)))
(the math:enumerated-every? (lambda Number[] (lambda Number Number (do Boolean)) (do Boolean)))
(the math:enumerated-some? (lambda Number[] (lambda Number Number (do Boolean)) (do Boolean)))
(the math:enumerated-select (lambda Number[] (lambda Number Number (do Boolean)) (do Number[])))
(the math:enumerated-exclude (lambda Number[] (lambda Number Number (do Boolean)) (do Number[])))
(the math:max (lambda Number Number (do Number)))
(the math:min (lambda Number Number (do Number)))
(the math:summation (lambda Number[] (do Number)))
(the math:product (lambda Number[] (do Number)))
(the math:maximum (lambda Unknown[] (do Number)))
(the math:minimum (lambda Unknown[] (do Number)))
(the math:maximum-index (lambda Number[] (do Number)))
(the math:minimum-index (lambda Number[] (do Number)))
(the math:max-length (lambda Unknown[] (do Number)))
(the math:min-length (lambda Unknown[] (do Number)))
(the math:increment (lambda Number (do Number)))
(the math:decrement (lambda Number (do Number)))
(the math:signed-floor (lambda Number (do Number)))
(the math:signed-trunc (lambda Number (do Number)))
(the math:signed-round (lambda Number (do Number)))
(the math:signed-ceil (lambda Number (do Number)))
(the math:floor (lambda Number (do Number)))
(the math:round (lambda Number (do Number)))
(the math:ceil (lambda Number (do Number)))
(the math:bit-set? (lambda Number Number (do Boolean)))
(the math:bit-set (lambda Number Number (do Number)))
(the math:bit-clear (lambda Number Number (do Number)))
(the math:power-of-two-bits (lambda Number (do Number)))
(the math:odd-bit? (lambda Number (do Boolean)))
(the math:even-bit? (lambda Number (do Boolean)))
(the math:average-bit (lambda Number Number (do Number)))
(the math:flag-flip (lambda Number (do Number)))
(the math:toggle-bit (lambda Number Number Number (do Number)))
(the math:same-sign-bit? (lambda Number Number (do Boolean)))
(the math:max-bit (lambda Number Number (do Number)))
(the math:min-bit (lambda Number Number (do Number)))
(the math:bit-equal? (lambda Number Number (do Boolean)))
(the math:modulo-bit (lambda Number Number (do Number)))
(the math:n-one-bit? (lambda Number Number (do Boolean)))
(the math:percent (lambda Number Number (do Number)))
(the math:round-to (lambda Number Number (do Number)))
(the math:median (lambda Number[] (do Number)))
(the math:mean (lambda Number[] (do Number)))
(the math:fold-n (lambda Number (lambda Unknown Number (do Unknown)) Unknown (do Unknown)))
(the math:fold-range (lambda Number Number (lambda Unknown Number (do Unknown)) Unknown (do Unknown)))
(the math:divisors (lambda Number (do Number[])))
(the math:divisors-exclusive (lambda Number (do Number[])))
(the math:amicable? (lambda Number (do Boolean)))
(the math:amicable-pair (lambda Number (do Number[])))
(the math:bit-count32 (lambda Number (do Number)))
(the math:bit-count (lambda Number (do Number)))
(the math:exp (lambda Number (do Number)))
(the math:square (lambda Number (do Number)))
(the math:big-integer-factorial (lambda Number[] (do Number[])))
(the math:big-integer-power (lambda Number Number (do Number[])))
(the math:big-integer-addition (lambda Number[] Number[] (do Number[])))
(the math:big-integer-subtraction (lambda Number[] Number[] (do Number[])))
(the math:big-integer-multiplication (lambda Number[] Number[] (do Number[])))
(the math:remove-leading-zeroes (lambda Number[] (do Number[])))
(the math:remove-trailing-zeroes (lambda Unknown[] (do Unknown[])))
(the math:big-integer-less-or-equal? (lambda Number[] Unknown[] (do Boolean)))
(the math:big-integer-division (lambda Unknown[] Number[] (do Number[])))
(the math:power-helper (lambda Number Number (do Number)))
(the math:reciprocal (lambda Number (do Number)))
(the math:power (lambda Number Number (do Number)))
(the math:log-taylor-series (lambda Number Number (do Number)))
(the math:int-log2 (lambda Number (do Number)))
(the math:log-base (lambda Number Number (do Number)))
(the math:greatest-common-divisor (lambda Number Number (do Number)))
(the math:least-common-divisor (lambda Number Number (do Number)))
(the math:coprime? (lambda Number Number (do Boolean)))
(the math:square-root (lambda Number (do Number)))
(the math:sqrt (lambda Number (do Number)))
(the math:standard-deviation2 (lambda Unknown[] (do Number)))
(the math:perfect-square? (lambda Number (do Number)))
(the math:circumference (lambda Number (do Number)))
(the math:hypotenuse (lambda Number Number (do Number)))
(the math:abs (lambda Number (do Number)))
(the math:nth-digit (lambda Number Number (do Number)))
(the math:remove-nth-digits (lambda Number Number (do Number)))
(the math:keep-nth-digits (lambda Number Number (do Number)))
(the math:normalize (lambda Number Number Number (do Number)))
(the math:linear-interpolation (lambda Number Number Number (do Number)))
(the math:gauss-sum (lambda Number (do Number)))
(the math:gauss-sum-sequance (lambda Number Number (do Number)))
(the math:clamp (lambda Number Number (do Number)))
(the math:clamp-range (lambda Number Number Number (do Number)))
(the math:odd? (lambda Number (do Boolean)))
(the math:even? (lambda Number (do Boolean)))
(the math:enumerated-odd? (lambda Unknown Number (do Boolean)))
(the math:enumerated-even? (lambda Unknown Number (do Boolean)))
(the math:sign (lambda Number (do Number)))
(the math:radians (lambda Number (do Number)))
(the math:degrees (lambda Number (do Number)))
(the math:average (lambda Number Number (do Number)))
(the math:euclidean-mod (lambda Number Number (do Number)))
(the math:euclidean-distance (lambda Number Number Number Number (do Number)))
(the math:manhattan-distance (lambda Number Number Number Number (do Number)))
(the math:positive? (lambda Number (do Boolean)))
(the math:negative? (lambda Number (do Boolean)))
(the math:invert (lambda Number (do Number)))
(the math:zero? (lambda Number (do Boolean)))
(the math:negative-one? (lambda Number (do Boolean)))
(the math:divisible? (lambda Number Number (do Boolean)))
(the math:factorial (lambda Number (do Number)))
(the math:sinh (lambda Number (do Number)))
(the math:cosh (lambda Number (do Number)))
(the math:tanh (lambda Number (do Number)))
(the math:standard-deviation (lambda Unknown[] (do Number)))
(the math:variance (lambda Unknown[] (do Number)))
(the math:lerp (lambda Number Number Number (do Number)))
(the math:gcd (lambda Number Number (do Number)))
(the math:lcm (lambda Number Number (do Number)))
(the math:gcd-zero (lambda Number Number (do Number)))
(the math:lcm-zero (lambda Number Number (do Number)))
(the math:mulberry-32-prng (lambda Number (do Number)))
(the math:random (lambda Number (do Abstraction)))
(the math:sine (lambda Number Number (do Number)))
(the math:cosine (lambda Number Number (do Number)))
(the math:cordic-k Number)
(the math:cordic-atan-table-5 Number[])
(the math:cordic-atan-table-10 Number[])
(the math:cordic (lambda Number Number Unknown[] (do Number[])))
(the math:cordic-10 (lambda Number (do Number[])))
(the math:cordic-5 (lambda Number (do Number[])))
(the math:prime-factors (lambda Number (do Unknown[])))
(the math:prime? (lambda Number (do Boolean)))
(the math:number-of-digits (lambda Number (do Number)))
(the math:largest-power (lambda Number (do Number)))
(the math:cartesian-product (lambda Unknown[] Unknown[] (do Unknown[])))
(the math:fibonacci (lambda Number (do Number)))
(the math:enumeration (lambda (do Unknown)))
(the math:palindrome? (lambda Unknown[] (do Boolean)))
(the math:max-sub-array-sum (lambda Number[] (do Number)))
(the math:list-fold (lambda Unknown[] (lambda Number Unknown (do Unknown)) Number (do Number)))
(the math:list-maximum (lambda Unknown[] (do Number)))
(the math:list-minimum (lambda Unknown[] (do Number)))
(the math:list-summation (lambda Unknown[] (do Number)))
(the math:list-product (lambda Unknown[] (do Number)))
(the math:list-range (lambda Number Number (do Number[])))
(the math:unique (lambda Number[] (do Number[])))
(the math:collatz (lambda Number (do Number[])))
(the list:pair (lambda Unknown Unknown (do Unknown[])))
(the list:car (lambda Unknown[] (do Unknown)))
(the list:cdr (lambda Unknown[] (do Unknown)))
(the list:head (lambda Unknown[] (do Unknown)))
(the list:tail (lambda Unknown[] (do Unknown)))
(the list:nil? (lambda Unknown[] (do Boolean)))
(the list:map (lambda Unknown[] (lambda Unknown (do Unknown)) (do Unknown[])))
(the list:filter (lambda Unknown[] (lambda Unknown (do Boolean)) (do Unknown[])))
(the list:fold (lambda Unknown[] (lambda Unknown Unknown (do Unknown)) Unknown (do Unknown)))
(the list:transform (lambda Unknown[] (lambda Unknown[] Unknown (do Unknown)) Unknown[] (do Unknown[])))
(the list:zip (lambda Unknown[] Unknown[] (do Unknown[])))
(the list:unzip (lambda Unknown[] (do Unknown[])))
(the list:length (lambda Unknown[] (do Number)))
(the list:enumerate (lambda Unknown[] (do Unknown[])))
(the list:reverse (lambda Unknown[] (do Unknown[])))
(the list:find (lambda Unknown[] (lambda Unknown (do Boolean)) (do Unknown[])))
(the list:find-tail (lambda Unknown[] (lambda Unknown (do Boolean)) (do Unknown[])))
(the list:some? (lambda Unknown[] (lambda Unknown (do Boolean)) (do Boolean)))
(the list:every? (lambda Unknown[] (lambda Unknown (do Boolean)) (do Boolean)))
(the list:remove-at (lambda Unknown[] Number (do Unknown[])))
(the list:insert-at (lambda Unknown[] Number Unknown (do Unknown[])))
(the list:get (lambda Unknown[] Number (do Unknown[])))
(the list:end (lambda Unknown[] (do Unknown[])))
(the list:rotate-left (lambda Unknown[] (do Unknown[])))
(the list:rotate-right (lambda Unknown[] (do Unknown[])))
(the list:concat! (lambda Unknown[] (do Unknown[])))
(the list:merge! (lambda Unknown[] Unknown (do Unknown[])))
(the list:flatten (lambda Unknown[] (do Unknown[])))
(the list:equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the list:count-of (lambda Unknown[] (lambda Unknown (do Boolean)) (do Number)))
(the list:count (lambda Unknown[] Number (do Number)))
(the list:take (lambda Unknown[] Number (do Unknown[])))
(the list:after (lambda Unknown[] Number (do Unknown[])))
(the list:slice (lambda Unknown[] Number Number (do Unknown[])))
(the list:for (lambda Unknown[] (lambda Unknown (do Unknown)) (do Unknown[])))
(the array:first (lambda Unknown[] (do Unknown)))
(the array:second (lambda Unknown[] (do Unknown)))
(the array:third (lambda Unknown[] (do Unknown)))
(the array:last (lambda Unknown[] (do Unknown)))
(the array:for (lambda Unknown[] (lambda Unknown (do Unknown)) (do Unknown[])))
(the array:buckets (lambda Number (do Unknown[])))
(the array:enumerated-for (lambda Unknown[] (lambda Unknown Number (do Unknown)) (do Unknown[])))
(the array:fill (lambda Number (lambda (do Unknown)) (do Unknown[])))
(the array:of (lambda Number (lambda Number (do Unknown)) (do Unknown[])))
(the array:map (lambda Unknown[] (lambda Unknown (do Unknown)) (do Unknown[])))
(the array:select (lambda Unknown[] (lambda Unknown (do Boolean)) (do Unknown[])))
(the array:exclude (lambda Unknown[] (lambda Unknown (do Boolean)) (do Unknown[])))
(the array:fold (lambda Unknown[] (lambda Unknown Unknown (do Unknown)) Unknown (do Unknown)))
(the array:fold-until (lambda Unknown[] (lambda Unknown Unknown (do Unknown)) (lambda Unknown (do Boolean)) Unknown (do Unknown)))
(the array:transform (lambda Unknown[] (lambda Unknown[] Unknown (do Unknown)) Unknown[] (do Unknown[])))
(the array:reduce (lambda Unknown[] (lambda Number Unknown (do Number)) Number (do Number)))
(the array:enumerated-reduce (lambda Unknown[] (lambda Number Unknown Number (do Number)) Number (do Number)))
(the array:every? (lambda Unknown[] (lambda Unknown (do Boolean)) (do Boolean)))
(the array:some? (lambda Unknown[] (lambda Unknown (do Boolean)) (do Boolean)))
(the array:find (lambda Unknown[] (lambda Unknown (do Boolean)) (do Unknown)))
(the array:find-option (lambda Unknown[] (lambda Unknown (do Boolean)) (do Unknown[][])))
(the array:has? (lambda Unknown[] (lambda Unknown (do Boolean)) (do Boolean)))
(the array:reverse (lambda Unknown[] (do Unknown)))
(the array:append! (lambda Unknown[] Unknown (do Unknown[])))
(the array:set-and-get! (lambda Unknown[] Number Unknown (do Unknown)))
(the array:tail! (lambda Unknown[] (do Unknown[])))
(the array:push! (lambda Unknown[] Unknown (do Unknown)))
(the array:pop! (lambda Unknown[] (do Unknown)))
(the array:even-indexed (lambda Unknown[] (do Unknown[])))
(the array:odd-indexed (lambda Unknown[] (do Unknown[])))
(the array:iterate (lambda Unknown[] (lambda Number (do Unknown)) (do Unknown[])))
(the array:empty? (lambda Unknown[] (do Boolean)))
(the array:not-empty? (lambda Unknown[] (do Boolean)))
(the array:count-of (lambda Unknown[] (lambda Unknown (do Boolean)) (do Number)))
(the array:count (lambda Unknown[] Number (do Number)))
(the array:empty! (lambda Unknown[] (do Unknown[])))
(the array:in-bounds? (lambda Unknown[] Number (do Boolean)))
(the get-option (lambda Unknown[] Number (do Unknown[])))
(the get-or-default (lambda Unknown[] Number Unknown (do Unknown)))
(the array:get-option (lambda Unknown[] Number (do Unknown[])))
(the array:get-or-default (lambda Unknown[] Number Unknown (do Unknown)))
(the array:slice (lambda Unknown[] Number Number (do Unknown[])))
(the car (lambda Unknown[] (do Unknown)))
(the cdr (lambda Unknown[] (do Unknown[])))
(the cons (lambda Unknown[] Unknown[] (do Unknown[])))
(the array:take (lambda Unknown[] Number (do Unknown[])))
(the array:drop (lambda Unknown[] Number (do Unknown[])))
(the array:binary-search (lambda Unknown[] Number (do Number)))
(the array:zip (lambda Unknown[] Unknown[] (do Unknown[][])))
(the array:unzip (lambda Unknown[] (do Unknown[][])))
(the array:equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the array:not-equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the array:unique (lambda Unknown[] (do Unknown[])))
(the array:join (lambda Unknown[] Unknown (do Unknown[])))
(the array:chars (lambda Unknown[] (do Unknown[])))
(the array:lines (lambda Unknown[] (do Unknown[])))
(the array:commas (lambda Unknown[] (do Unknown[])))
(the array:spaces (lambda Unknown[] (do Unknown[])))
(the array:dots (lambda Unknown[] (do Unknown[])))
(the array:colons (lambda Unknown[] (do Unknown[])))
(the array:semi-colons (lambda Unknown[] (do Unknown[])))
(the array:dashes (lambda Unknown[] (do Unknown[])))
(the array:flat-one (lambda Unknown[] (do Unknown[])))
(the array:flat (lambda Unknown[] (do Unknown[])))
(the array:sort (lambda Unknown[] (lambda Unknown Unknown (do Unknown)) (do Unknown[])))
(the array:sorted-ascending? (lambda Unknown[] (do Boolean)))
(the array:sorted-descending? (lambda Unknown[] (do Boolean)))
(the array:bubble-sort (lambda Unknown[] (lambda Unknown Unknown (do Boolean)) (do Unknown[])))
(the array:sorted-by? (lambda Unknown[] (lambda Unknown Unknown (do Boolean)) (do Boolean)))
(the array:increment! (lambda Number[] Number Number (do Unknown[])))
(the array:set (lambda Unknown[] Number Unknown (do Unknown[])))
(the array:sliding-window (lambda Unknown[] Number (do Unknown[])))
(the array:adjacent-difference (lambda Unknown[] (lambda Unknown Unknown (do Unknown)) (do Unknown[])))
(the array:partition (lambda Unknown[] Number (do Unknown[])))
(the array:ranges (lambda Unknown[] (lambda Unknown (do Boolean)) (do Unknown[])))
(the array:chunks (lambda Unknown[] (lambda Unknown (do Boolean)) (do Unknown[])))
(the array:adjacent-find (lambda Unknown[] (lambda Unknown Unknown (do Boolean)) (do Number)))
(the matrix:zeroes (lambda Number Number (do Number[][])))
(the matrix:ones (lambda Number Number (do Number[][])))
(the matrix:truth-table (lambda Number Number (do Unknown[])))
(the matrix:false-table (lambda Number Number (do Unknown[])))
(the matrix:points (lambda Unknown[] (lambda Unknown (do Boolean)) (do Number[][])))
(the matrix:for (lambda Unknown[] (lambda Unknown (do Unknown)) (do Unknown[])))
(the matrix:shallow-copy (lambda Unknown[] (do Unknown[])))
(the matrix:flat-one (lambda Unknown[] (do Unknown[])))
(the matrix:find-index (lambda Unknown[] (lambda Unknown (do Boolean)) (do Number[])))
(the matrix:find (lambda Unknown[] (lambda Unknown (do Boolean)) (do Unknown)))
(the matrix:enumerated-for (lambda Unknown[] (lambda Unknown Number Number (do Unknown)) (do Unknown[])))
(the matrix:of (lambda Unknown[] (lambda Unknown Unknown (do Unknown)) (do Unknown[])))
(the matrix:fill (lambda Number Number (lambda Number Number (do Unknown)) (do Unknown[])))
(the matrix:rotate (lambda Unknown[] (do Unknown[])))
(the matrix:product (lambda Unknown[] Unknown[] (do Unknown[])))
(the matrix:dot-product (lambda Unknown[] Unknown[] (do Unknown[])))
(the matrix:rotate-square (lambda Unknown[] (do Unknown[])))
(the matrix:flip-square (lambda Unknown[] (do Unknown[])))
(the matrix:dimensions (lambda Unknown[] (do Number[])))
(the matrix:in-bounds? (lambda Unknown[] Number Number (do Boolean)))
(the matrix:diagonal-neighborhood Number[][])
(the matrix:kernel-neighborhood Number[][])
(the matrix:moore-neighborhood Number[][])
(the matrix:von-neumann-neighborhood Number[][])
(the matrix:adjacent (lambda Unknown[] Unknown[] Number Number (lambda Unknown Unknown[] Number Number (do Unknown)) (do Unknown[])))
(the matrix:adjacent-sum (lambda Unknown[] Unknown[] Number Number (lambda Unknown Unknown (do Unknown)) (do Number)))
(the matrix:adjacent-product (lambda Unknown[] Unknown[] Number Number (lambda Unknown Unknown (do Unknown)) (do Number)))
(the matrix:adjacent-fold (lambda Unknown[] Unknown[] Number Number (lambda Unknown Unknown (do Unknown)) Number (do Number)))
(the matrix:sliding-adjacent-sum (lambda Unknown[] Unknown[] Number Number Number (lambda Unknown Unknown (do Unknown)) (do Number)))
(the matrix:set! (lambda Unknown[] Number Number Unknown (do Unknown[])))
(the matrix:get (lambda Unknown[] Number Number (do Unknown)))
(the matrix:set-and-get! (lambda Unknown[] Number Number Unknown (do Unknown)))
(the matrix:get-option (lambda Unknown[] Number Number (do Unknown[])))
(the matrix:get-or-default (lambda Unknown[] Number Number Unknown (do Unknown)))
(the from:digit->word (lambda Number (do Number[])))
(the from:degrees->radians (lambda Number (do Number)))
(the from:radians->degrees (lambda Number (do Number)))
(the from:yx->key (lambda Unknown Unknown (do Unknown[])))
(the from:string-or-number->key (lambda Unknown[] (do Unknown[])))
(the from:list->array (lambda Unknown[] (do Unknown)))
(the from:array->list (lambda Unknown[] (do Unknown)))
(the from:char->digit (lambda Number (do Number)))
(the from:chars->digits (lambda Number[] (do Number[])))
(the from:digit->char (lambda Number (do Number)))
(the from:digits->chars (lambda Number[] (do Number[])))
(the from:chars->positive-or-negative-digits (lambda Unknown[] (do Unknown[])))
(the from:digits->integer (lambda Number[] (do Number)))
(the from:digits->integer-base (lambda Unknown[] Number (do Number)))
(the from:integer->string-base (lambda Number Number (do Number[])))
(the from:positive-or-negative-digits->integer (lambda Unknown[] (do Number)))
(the from:positive-or-negative-digits->chars (lambda Unknown[] (do Unknown[])))
(the from:integer->digits (lambda Number (do Number[])))
(the from:number->positive-or-negative-digits (lambda Number (do Number[])))
(the from:integer->bits-reversed (lambda Number (do Number[])))
(the from:integer->bits (lambda Number (do Unknown)))
(the from:bits->integer (lambda Unknown[] (do Number)))
(the from:numbers->chars (lambda Unknown[] (do Unknown[])))
(the from:chars->integer (lambda Number[] (do Number)))
(the from:positive-or-negative-chars->integer (lambda Unknown[] (do Number)))
(the from:string->integer (lambda Number[] (do Number)))
(the from:strings->integers (lambda Unknown[][] (do Number[])))
(the from:string->float (lambda Number[] (do Number)))
(the from:strings->floats (lambda Unknown[][] (do Number[])))
(the from:float->string (lambda Number (do Number[])))
(the from:floats->strings (lambda Unknown[] (do Unknown[])))
(the from:string->date (lambda Unknown[] (do Unknown[])))
(the from:integer->string (lambda Number (do Number[])))
(the from:integers->strings (lambda Unknown[] (do Unknown[])))
(the from:chars->set (lambda Number[] (do Unknown[][])))
(the from:array->set (lambda Unknown[] (do Unknown[][][])))
(the from:array->table (lambda Unknown[] (do Unknown[][][])))
(the from:set->array (lambda Unknown[] (do Unknown[])))
(the from:map->array (lambda Unknown[] (do Unknown[])))
(the from:set->integers (lambda Unknown[] (do Unknown[])))
(the from:array->brray (lambda Unknown[] (do Unknown[])))
(the from:brray->array (lambda Unknown[] (do Unknown[])))
(the from:string->array (lambda Number[] Number (do Unknown[][])))
(the from:string->words (lambda Unknown[] (do Unknown[])))
(the from:string->chunks (lambda Unknown[] (lambda Unknown (do Boolean)) (do Unknown[])))
(the from:array->string (lambda Unknown[][] Number (do Number[])))
(the from:matrix->string (lambda Unknown[] (do Unknown[])))
(the from:matrix-of-integer->string (lambda Unknown[] (do Unknown[])))
(the array:shallow-copy (lambda Unknown[] (do Unknown[])))
(the array:deep-copy (lambda Unknown[] (do Unknown[])))
(the array:merge! (lambda Unknown[] Unknown[] (do Unknown[])))
(the array:merge (lambda Unknown[] Unknown[] (do Unknown[])))
(the array:concat (lambda Unknown[] (do Unknown[])))
(the array:concat-with (lambda Unknown[] Unknown (do Unknown[])))
(the array:swap-remove! (lambda Unknown[] Number (do Unknown[])))
(the array:swap! (lambda Unknown[] Number Number (do Unknown[])))
(the array:index-of (lambda Unknown[] Number (do Number)))
(the array:permutations (lambda Unknown[] (do Unknown[][])))
(the array:unique-pairs (lambda Unknown[] (do Unknown[])))
(the array:cartesian-product (lambda Unknown[] Unknown[] (do Unknown[])))
(the array:enumerate (lambda Unknown[] (do Unknown[][])))
(the array:enumerated-map (lambda Unknown[] (lambda Unknown Number (do Unknown)) (do Unknown[])))
(the array:enumerated-select (lambda Unknown[] (lambda Unknown Number (do Boolean)) (do Unknown[])))
(the array:enumerated-exclude (lambda Unknown[] (lambda Unknown Number (do Boolean)) (do Unknown[])))
(the array:enumerated-fold (lambda Unknown[] (lambda Unknown Unknown Number (do Unknown)) Unknown (do Unknown)))
(the array:enumerated-transform (lambda Unknown[] (lambda Unknown[] Unknown Number (do Unknown)) Unknown[] (do Unknown[])))
(the array:enumerated-find (lambda Unknown[] (lambda Unknown Number (do Boolean)) (do Unknown[])))
(the array:enumerated-find-index (lambda Unknown[] (lambda Unknown Number (do Boolean)) (do Number)))
(the array:enumerated-every? (lambda Unknown[] (lambda Unknown Number (do Boolean)) (do Boolean)))
(the array:enumerated-some? (lambda Unknown[] (lambda Unknown Number (do Boolean)) (do Boolean)))
(the array:find-index (lambda Unknown[] (lambda Unknown (do Boolean)) (do Number)))
(the array:remove (lambda Unknown[] Number (do Unknown[])))
(the array:pad-right (lambda Unknown[] Unknown[] (do Unknown[])))
(the array:pad-left (lambda Unknown[] Unknown[] (do Unknown[])))
(the array:pad-right! (lambda Unknown[] Unknown[] (do Unknown[])))
(the array:pad-left! (lambda Unknown[] Unknown[] (do Unknown[])))
(the array:rotate-right (lambda Unknown[] Number (do Unknown[])))
(the array:rotate-left (lambda Unknown[] Number (do Unknown[])))
(the string:concat-with-lines (lambda Unknown[] (do Unknown[])))
(the string:wrap-in-quotes (lambda Unknown (do Unknown[])))
(the string:to-fixed (lambda Unknown[] Number (do Unknown[])))
(the string:character-occurances (lambda Unknown[] Number (do Number)))
(the string:slice-from (lambda Unknown[] Unknown[] (do Unknown[])))
(the string:slice-after (lambda Unknown[] Unknown[] (do Unknown[])))
(the string:slice-to (lambda Unknown[] Unknown[] (do Unknown)))
(the string:slice-before (lambda Unknown[] Unknown[] (do Unknown)))
(the string:split (lambda Unknown[] Unknown (do Unknown[])))
(the string:match (lambda Unknown[] Unknown[] (do Number)))
(the string:has? (lambda Unknown[] Unknown[] (do Boolean)))
(the string:lesser? (lambda Unknown[] Unknown[] (do Boolean)))
(the string:greater? (lambda Unknown[] Unknown[] (do Boolean)))
(the string:greater-or-equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the string:lesser-or-equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the string:equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the string:not-equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the string:one-equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the string:two-equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the string:three-equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the string:min (lambda Unknown[] Unknown[] (do Unknown[])))
(the string:max (lambda Unknown[] Unknown[] (do Unknown[])))
(the string:join-as-table-with (lambda Unknown[] Unknown Unknown (do Unknown[])))
(the string:starts-with? (lambda Unknown[] Unknown[] (do Boolean)))
(the string:ends-with? (lambda Unknown[] Unknown[] (do Boolean)))
(the string:join-as-table (lambda Unknown[] (do Unknown[])))
(the string:trim-left (lambda Unknown[] (do Unknown[])))
(the string:trim-right (lambda Unknown[] (do Unknown[])))
(the string:trim (lambda Unknown[] (do Unknown[])))
(the string:lines (lambda Unknown[] (do Unknown[])))
(the string:chars (lambda Unknown[] (do Unknown[])))
(the string:words (lambda Unknown[] (do Unknown[])))
(the string:commas (lambda Unknown[] (do Unknown[])))
(the string:dots (lambda Unknown[] (do Unknown[])))
(the string:colons (lambda Unknown[] (do Unknown[])))
(the string:semi-colons (lambda Unknown[] (do Unknown[])))
(the string:dashes (lambda Unknown[] (do Unknown[])))
(the string:multilines (lambda Unknown[] (do Unknown[])))
(the string:append (lambda Unknown[] Unknown[] (do Unknown[])))
(the string:prepend (lambda Unknown[] Unknown[] (do Unknown[])))
(the string:pad-left (lambda Unknown[] Number Unknown[] (do Unknown[])))
(the string:pad-right (lambda Unknown[] Number Unknown[] (do Unknown[])))
(the string:upper (lambda Unknown[] (do Unknown[])))
(the string:lower (lambda Unknown[] (do Unknown[])))
(the new:map (lambda Unknown[] (do Unknown[])))
(the new:set (lambda Unknown[] (do Unknown[])))
(the new:set4 (lambda (do Unknown[])))
(the new:set8 (lambda (do Unknown[])))
(the new:set16 (lambda (do Unknown[])))
(the new:set32 (lambda (do Unknown[])))
(the new:set64 (lambda (do Unknown[])))
(the new:set128 (lambda (do Unknown[])))
(the new:map4 (lambda (do Unknown[])))
(the new:map8 (lambda (do Unknown[])))
(the new:map16 (lambda (do Unknown[])))
(the new:map32 (lambda (do Unknown[])))
(the new:map64 (lambda (do Unknown[])))
(the new:map128 (lambda (do Unknown[])))
(the new:set512 (lambda (do Unknown[])))
(the new:map512 (lambda (do Unknown[])))
(the new:set1024 (lambda (do Unknown[])))
(the new:map1024 (lambda (do Unknown[])))
(the new:set2048 (lambda (do Unknown[])))
(the new:map2048 (lambda (do Unknown[])))
(the new:set-n (lambda Number (do Unknown[])))
(the new:map-n (lambda Number (do Unknown[])))
(the new:array (lambda Unknown[] (do Unknown[])))
(the new:list (lambda Unknown (do Unknown[][])))
(the new:date (lambda Unknown Unknown Unknown (do Unknown[])))
(the new:heap Unknown[])
(the new:brray (lambda (do Unknown[])))
(the new:queue (lambda (do Unknown[])))
(the new:stack (lambda (do Unknown[])))
(the new:binary-tree (lambda Unknown (do Unknown[])))
(the binary-tree:left (lambda Unknown[] (do Unknown)))
(the binary-tree:right (lambda Unknown[] (do Unknown)))
(the binary-tree:left! (lambda Unknown[] Unknown (do Unknown[])))
(the binary-tree:right! (lambda Unknown[] Unknown (do Unknown[])))
(the binary-tree:value (lambda Unknown[] (do Unknown)))
(the binary-tree:value! (lambda Unknown[] Unknown (do Unknown[])))
(the binary-tree:node? (lambda Unknown[] (do Boolean)))
(the binary-tree:nil? (lambda Unknown[] (do Boolean)))
(the binary-tree:equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the binary-tree:traverse-pre-order (lambda Unknown[] (lambda Unknown[] (do Unknown)) (do Number)))
(the binary-tree:traverse-in-order (lambda Unknown[] (lambda Unknown[] (do Unknown)) (do Number)))
(the binary-tree:traverse-post-order (lambda Unknown[] (lambda Unknown[] (do Unknown)) (do Number)))
(the set:index (lambda Unknown[] Unknown[] (do Unknown)))
(the set:add! (lambda Unknown[] Unknown[] (do Unknown[])))
(the set:remove! (lambda Unknown[] Unknown[] (do Unknown[])))
(the set:has? (lambda Unknown[] Unknown[] (do Boolean)))
(the set:exists? (lambda Unknown[] Unknown[] (do Boolean)))
(the set:not-exists? (lambda Unknown[] Unknown[] (do Boolean)))
(the set:add-and-get! (lambda Unknown[] Unknown[] (do Unknown[])))
(the set:remove-and-get! (lambda Unknown[] Unknown[] (do Unknown[])))
(the set:with! (lambda Unknown[] Unknown[] (do Unknown[])))
(the set:max-capacity (lambda Unknown[] Unknown[] (do Unknown[])))
(the set:min-capacity (lambda Unknown[] Unknown[] (do Unknown[])))
(the set:values (lambda Unknown[] (do Unknown[])))
(the set:intersection (lambda Unknown[] Unknown[] (do Unknown[])))
(the set:difference (lambda Unknown[] Unknown[] (do Unknown[])))
(the set:xor (lambda Unknown[] Unknown[] (do Unknown[])))
(the set:union (lambda Unknown[] Unknown[] (do Unknown[])))
(the set:empty! (lambda Unknown[] (do Unknown[])))
(the map:with! (lambda Unknown[] Unknown[] (do Unknown[])))
(the map:empty! (lambda Unknown[] (do Unknown[])))
(the map:keys (lambda Unknown[] (do Unknown[])))
(the map:values (lambda Unknown[] (do Unknown[])))
(the map:entries (lambda Unknown[] (do Unknown[])))
(the map:set! (lambda Unknown[] Unknown[] Unknown (do Unknown[])))
(the map:remove! (lambda Unknown[] Unknown[] (do Unknown[])))
(the map:set-and-get! (lambda Unknown[] Unknown[] Unknown (do Unknown)))
(the map:remove-and-get! (lambda Unknown[] Unknown[] (do Number)))
(the map:get (lambda Unknown[] Unknown[] (do Number)))
(the map:get-option (lambda Unknown[] Unknown[] (do Unknown[][][])))
(the map:has? (lambda Unknown[] Unknown[] (do Boolean)))
(the map:exists? (lambda Unknown[] Unknown[] (do Boolean)))
(the map:not-exists? (lambda Unknown[] Unknown[] (do Boolean)))
(the map:count (lambda Unknown[] (do Unknown[])))
(the map:max (lambda Unknown[] (do Unknown[])))
(the map:min (lambda Unknown[] (do Unknown[])))
(the map:increment! (lambda Unknown[] Unknown[] (do Unknown[])))
(the map:increment-and-get! (lambda Unknown[] Unknown[] (do Unknown)))
(the map:decrement! (lambda Unknown[] Unknown[] (do Unknown[])))
(the map:decrement-and-get! (lambda Unknown[] Unknown[] (do Unknown)))
(the doubly-linked-list:prev! (lambda Unknown[][] Unknown[][][] (do Unknown[])))
(the doubly-linked-list:next! (lambda Unknown[][] Unknown[][][] (do Unknown[])))
(the doubly-linked-list:prev (lambda Unknown[] (do Unknown)))
(the doubly-linked-list:next (lambda Unknown[] (do Unknown)))
(the doubly-linked-list:value (lambda Unknown[] (do Unknown)))
(the var:def (lambda Unknown (do Unknown[])))
(the var:get (lambda Unknown[] (do Unknown)))
(the var:set! (lambda Unknown[] Unknown (do Unknown[])))
(the var:del! (lambda Unknown[] (do Unknown[])))
(the var:set-and-get! (lambda Unknown[] Unknown (do Unknown)))
(the math:var-def (lambda Number (do Number[])))
(the math:var-zero (lambda (do Number[])))
(the math:var-one (lambda (do Number[])))
(the math:var-get (lambda Number[] (do Number)))
(the math:var-set! (lambda Number[] Number (do Number[])))
(the math:var-del! (lambda Number[] (do Number[])))
(the math:var-set-and-get! (lambda Number[] Number (do Number)))
(the math:var-increment! (lambda Number[] (do Number[])))
(the math:var-decrement! (lambda Number[] (do Number[])))
(the math:var-increment-and-get! (lambda Number[] (do Number)))
(the math:var-decrement-and-get! (lambda Number[] (do Number)))
(the math:var-add! (lambda Number[] Number (do Number[])))
(the math:var-subtract! (lambda Number[] Number (do Number[])))
(the math:var-multiply! (lambda Number[] Number (do Number[])))
(the math:var-divide! (lambda Number[] Number (do Number[])))
(the math:var-add-and-get! (lambda Number[] Number (do Number)))
(the math:var-subtract-and-get! (lambda Number[] Number (do Number)))
(the math:var-multiply-and-get! (lambda Number[] Number (do Number)))
(the math:var-divide-and-get! (lambda Number[] (do Number)))
(the math:compound-growth (lambda Number Number Number (do Number)))
(the math:hamming-numbers (lambda Number (do Number[])))
(the math:hamming-weight (lambda Number (do Number)))
(the math:shoelace (lambda Unknown[] (do Number)))
(the math:collinear? (lambda Unknown[] (do Boolean)))
(the bools:fold (lambda Boolean[] (lambda Boolean Boolean (do Boolean)) Boolean (do Boolean)))
(the bools:map (lambda Boolean[] (lambda Boolean (do Boolean)) (do Boolean[])))
(the bools:select (lambda Boolean[] (lambda Boolean (do Boolean)) (do Boolean[])))
(the bools:exclude (lambda Boolean[] (lambda Boolean (do Boolean)) (do Boolean[])))
(the boole:truths (lambda Number (do Boolean[])))
(the boole:lies (lambda Number (do Boolean[])))
(the boole:def (lambda Unknown (do Boolean[])))
(the boole:def-strict (lambda Boolean (do Boolean[])))
(the boole:get (lambda Boolean[] (do Boolean)))
(the boole:set! (lambda Boolean[] Boolean (do Boolean[])))
(the boole:toggle! (lambda Boolean[] (do Boolean[])))
(the boole:true (lambda (do Boolean[])))
(the boole:false (lambda (do Boolean[])))
(the boole:true! (lambda Boolean[] (do Boolean[])))
(the boole:false! (lambda Boolean[] (do Boolean[])))
(the boole:true? (lambda Boolean[] (do Boolean)))
(the boole:false? (lambda Boolean[] (do Boolean)))
(the curry:ternary (lambda (lambda Unknown Unknown Unknown (do Unknown)) Unknown Unknown (do Abstraction)))
(the curry:binary (lambda (lambda Unknown Unknown (do Unknown)) Unknown (do Abstraction)))
(the curry:unary (lambda (lambda Unknown (do Unknown)) (do Abstraction)))
(the curry:three (lambda (lambda Unknown Unknown Unknown (do Unknown)) Unknown Unknown (do Abstraction)))
(the curry:two (lambda (lambda Unknown Unknown (do Unknown)) Unknown (do Abstraction)))
(the curry:one (lambda (lambda Unknown (do Unknown)) (do Abstraction)))
(the curry:flip (lambda (lambda Unknown Unknown (do Unknown)) (do Abstraction)))
(the brray:offset-left (lambda Unknown[] (do Number)))
(the brray:offset-right (lambda Unknown[] (do Number)))
(the brray:length (lambda Unknown[] (do Number)))
(the brray:empty? (lambda Unknown[] (do Boolean)))
(the brray:empty! (lambda Unknown[][][] (do Unknown[][][])))
(the brray:get (lambda Unknown[] Number (do Unknown)))
(the brray:set! (lambda Unknown[] Number Unknown (do Unknown[])))
(the brray:add-to-left! (lambda Unknown[] Unknown (do Unknown[])))
(the brray:add-to-right! (lambda Unknown[] Unknown (do Unknown[])))
(the brray:remove-from-left! (lambda Unknown[] (do Unknown[][][])))
(the brray:remove-from-right! (lambda Unknown[] (do Unknown[][][])))
(the brray:iter (lambda Unknown[] (lambda Unknown (do Unknown)) (do Number)))
(the brray:map (lambda Unknown[] (lambda Unknown (do Unknown)) (do Unknown[])))
(the brray:balance? (lambda Unknown[] (do Boolean)))
(the brray:balance! (lambda Unknown[] (do Unknown[][][])))
(the brray:append! (lambda Unknown[] Unknown (do Unknown[])))
(the brray:prepend! (lambda Unknown[] Unknown (do Unknown[])))
(the brray:head! (lambda Unknown[] (do Unknown[])))
(the brray:tail! (lambda Unknown[] (do Unknown[])))
(the brray:first (lambda Unknown[] (do Unknown)))
(the brray:last (lambda Unknown[] (do Unknown)))
(the brray:pop-right! (lambda Unknown[] (do Unknown)))
(the brray:pop-left! (lambda Unknown[] (do Unknown)))
(the brray:rotate-left! (lambda Unknown[] Number (do Unknown[])))
(the brray:rotate-right! (lambda Unknown[] Number (do Unknown[])))
(the brray:slice (lambda Unknown[] Number Number (do Unknown[])))
(the queue:empty? (lambda Unknown[] (do Boolean)))
(the queue:not-empty? (lambda Unknown[] (do Boolean)))
(the queue:empty! (lambda Unknown[][][] (do Unknown[][][])))
(the queue:enqueue! (lambda Unknown[] Unknown (do Unknown[])))
(the queue:dequeue! (lambda Unknown[] (do Unknown[])))
(the queue:peek (lambda Unknown[] (do Unknown)))
(the stack:empty? (lambda Unknown[] (do Boolean)))
(the stack:not-empty? (lambda Unknown[] (do Boolean)))
(the stack:empty! (lambda Unknown[][][] (do Unknown[][][])))
(the stack:push! (lambda Unknown[] Unknown (do Unknown[])))
(the stack:pop! (lambda Unknown[] (do Unknown[])))
(the stack:peek (lambda Unknown[] (do Unknown)))
(the time:add-seconds (lambda Number Number (do Number)))
(the time:add-minutes (lambda Number Number (do Number)))
(the time:add-hours (lambda Number Number (do Number)))
(the time:add-days (lambda Number Number (do Number)))
(the time:add-months (lambda Number Number (do Number)))
(the time:add-years (lambda Number Number (do Number)))
(the time:sub-seconds (lambda Number Number (do Number)))
(the time:sub-minutes (lambda Number Number (do Number)))
(the time:sub-hours (lambda Number Number (do Number)))
(the time:sub-days (lambda Number Number (do Number)))
(the time:sub-months (lambda Number Number (do Number)))
(the time:sub-years (lambda Number Number (do Number)))
(the date:year (lambda Unknown[] (do Unknown)))
(the date:month (lambda Unknown[] (do Unknown)))
(the date:day (lambda Unknown[] (do Unknown)))
(the date:month-day (lambda Unknown[] (do Unknown[])))
(the date:year-month (lambda Unknown[] (do Unknown[])))
(the loop:sliding-window-array (lambda Unknown[] Number (do Unknown[][])))
(the loop:merge (lambda Unknown[] Unknown[] (do Unknown[])))
(the loop:map (lambda Unknown[] (lambda Unknown (do Unknown)) (do Unknown[])))
(the loop:until (lambda (lambda Unknown (do Boolean)) (lambda Unknown (do Unknown)) Unknown (do Unknown)))
(the loop:while (lambda (lambda (do Boolean)) (lambda (do Unknown)) (do Number)))
(the loop:while-safe (lambda (lambda (do Boolean)) (lambda (do Unknown)) (do Number)))
(the loop:for-range (lambda Number Number (lambda Number (do Unknown)) (do Number)))
(the loop:for-n (lambda Number (lambda Number (do Unknown)) (do Number)))
(the loop:repeat (lambda Number (lambda (do Unknown)) (do Number)))
(the loop:some-n? (lambda Number (lambda Number (do Boolean)) (do Number)))
(the loop:some-range? (lambda Number Number (lambda Number (do Boolean)) (do Number)))
(the node:parent (lambda Number (do Number)))
(the node:left (lambda Number (do Number)))
(the node:right (lambda Number (do Number)))
(the heap:top Number)
(the heap:greater? (lambda Unknown[] Number Number (lambda Unknown Unknown (do Unknown)) (do Unknown)))
(the heap:sift-up! (lambda Unknown[] (lambda Unknown Unknown (do Unknown)) (do Number)))
(the heap:sift-down! (lambda Unknown[] (lambda Unknown Unknown (do Unknown)) (do Number)))
(the heap:peek (lambda Unknown[] (do Unknown)))
(the heap:push! (lambda Unknown[] Unknown (lambda Unknown Unknown (do Unknown)) (do Unknown[])))
(the heap:pop! (lambda Unknown[] (lambda Unknown Unknown (do Unknown)) (do Unknown[])))
(the heap:replace! (lambda Unknown[] Unknown (lambda Unknown Unknown (do Unknown)) (do Unknown[])))
(the heap:empty? (lambda Unknown[] (do Boolean)))
(the heap:not-empty? (lambda Unknown[] (do Boolean)))
(the heap:empty! (lambda Unknown[] (do Unknown[])))
(the from:array->heap (lambda Unknown[] (lambda Unknown Unknown (do Unknown)) (do Unknown[])))
(the optimization:tail-call-loop (lambda Unknown[] (do Unknown)))
(the optimization:tail-calls-0 (lambda (lambda (do Unknown)) (do Abstraction)))
(the optimization:tail-calls-1 (lambda (lambda Unknown (do Unknown)) (do Abstraction)))
(the optimization:tail-calls-2 (lambda (lambda Unknown Unknown (do Unknown)) (do Abstraction)))
(the optimization:tail-calls-3 (lambda (lambda Unknown Unknown Unknown (do Unknown)) (do Abstraction)))
(the optimization:tail-calls-4 (lambda (lambda Unknown Unknown Unknown Unknown (do Unknown)) (do Abstraction)))
(the option:error? (lambda Unknown[] (do Boolean)))
(the option:value? (lambda Unknown[] (do Boolean)))
(the option:value (lambda Unknown[] (do Unknown)))
(the option:error (lambda Unknown[] (do Unknown)))
(the new:ring-buffer (lambda Number (do Abstraction[])))
(the debug (lambda Unknown (do Unknown)))
(the array:get (lambda Unknown[] Number (do Unknown)))
(the array:length (lambda Unknown[] (do Number)))
(the array:set! (lambda Unknown[] Number Unknown (do Unknown[])))
(the array:remove-last! (lambda Unknown[] (do Unknown[])))
(the push! (lambda Unknown[] Unknown (do Unknown)))
(the del! (lambda Unknown[] (do Unknown[])))
(the array:del! (lambda Unknown[] (do Unknown[])))
(the equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the not-equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the new:big-integer (lambda Number[] (do Number[])))
(the while (lambda Number Unknown (do Number)))
(the math:sort (lambda Number[] (lambda Number Number (do Boolean)) (do Number[])))
(the math:flat-one (lambda Number[][] (do Number[])))
(the math:log1p (lambda Number Number (do Number)))
(the Int (lambda Number[] (do Number[])))
(the Iadd (lambda Number[] Number[] (do Number[])))
(the Isub (lambda Number[] Number[] (do Number[])))
(the Imul (lambda Number[] Number[] (do Number[])))
(the Idiv (lambda Unknown[] Number[] (do Number[])))
(the array:get-number (lambda Number[] Number (do Number)))
(the array:get-array (lambda Unknown[][] Number (do Unknown[])))
(the array:get-boolean (lambda Boolean[] Number (do Boolean)))
(the array:filter (lambda Unknown[] (lambda Unknown (do Boolean)) (do Unknown[])))
(the array:at (lambda Unknown[] Number (do Unknown)))
(the array:head (lambda Unknown[] (do Unknown)))
(the array:tail (lambda Unknown[] (do Unknown[])))
(the array:car (lambda Unknown[] (do Unknown)))
(the array:cdr (lambda Unknown[] (do Unknown[])))
(the array:for-range (lambda Number Number (lambda Number (do Unknown)) (do Number)))
(the π Number)
(the τ Number)
(the η Number)
(the ∞ Number)
(the λ (lambda ... (do Abstraction)))
(the array? (lambda Unknown (do Boolean)))
(the char? (lambda Number (do Boolean)))
(the bool? (lambda Unknown (do Boolean)))
(the match:negative? (lambda Unknown[] (do Boolean)))
(the match:number? (lambda Unknown[] (do Boolean)))
(the match:digit? (lambda Number (do Boolean)))
(the match:digits? (lambda Unknown[] (do Boolean)))
(the ast:type Number)
(the ast:value Number)
(the ast:apply Number)
(the ast:word Number)
(the ast:atom Number)
(the ast:leaf (lambda Unknown Unknown (do Unknown[])))
(the ast:leaf? (lambda Unknown[] (do Boolean)))
(the from:chars->ast (lambda Unknown[] (do Unknown[])))
(the special-form:let (lambda Unknown[] Unknown[] (do Unknown)))
(the special-form:lambda (lambda Unknown[] Unknown (do Abstraction)))
(the special-form:apply (lambda Unknown[] Unknown[] (do Unknown)))
(the special-form:array (lambda Unknown[] Unknown[] (do Unknown[])))
(the special-form:length (lambda Unknown[] Unknown[] (do Number)))
(the special-form:get (lambda Unknown[] Unknown[] (do Unknown)))
(the special-form:set! (lambda Unknown[] Unknown[] (do Unknown[])))
(the special-form:pop! (lambda Unknown[] Unknown[] (do Unknown[])))
(the special-form:equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the special-form:add (lambda Unknown[] Unknown[] (do Number)))
(the special-form:subtract (lambda Unknown[] Unknown[] (do Number)))
(the special-form:multiply (lambda Unknown[] Unknown[] (do Number)))
(the special-form:divide (lambda Unknown[] Unknown[] (do Number)))
(the special-form:greater-than? (lambda Unknown[] Unknown[] (do Boolean)))
(the special-form:less-than? (lambda Unknown[] Unknown[] (do Boolean)))
(the special-form:greater-than-or-equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the special-form:less-than-or-equal? (lambda Unknown[] Unknown[] (do Boolean)))
(the special-form:mod (lambda Unknown[] Unknown[] (do Number)))
(the special-form:bit-wise-and (lambda Unknown[] Unknown[] (do Number)))
(the special-form:bit-wise-or (lambda Unknown[] Unknown[] (do Number)))
(the special-form:bit-wise-xor (lambda Unknown[] Unknown[] (do Number)))
(the special-form:bit-wise-right-shift (lambda Unknown[] Unknown[] (do Number)))
(the special-form:bit-wise-left-shift (lambda Unknown[] Unknown[] (do Number)))
(the special-form:bit-wise-not (lambda Unknown[] Unknown[] (do Number)))
(the special-form:do (lambda Unknown[] Unknown[] (do Unknown)))
(the special-form:if (lambda Unknown[] Unknown[] (do Unknown[])))
(the special-form:and? (lambda Unknown[] Unknown[] (do Boolean)))
(the special-form:or? (lambda Unknown[] Unknown[] (do Boolean)))
(the special-form:loop (lambda Unknown[] Unknown[] (do Number)))
(the special-form:atom? (lambda Unknown[] Unknown[] (do Boolean)))
(the special-form:lambda? (lambda Unknown[] Unknown[] (do Boolean)))
(the keywords Unknown[])
(the prototype:get (lambda Unknown[] Unknown[] (do Number)))
(the prototype:create! (lambda Unknown (do Unknown[])))
(the evaluate (lambda Unknown[] Unknown[] (do Unknown[])))
(the ast:stringify (lambda Unknown[] (do Unknown[])))
(the ast:get-name (lambda Unknown[] (do Unknown)))
(the ast:traverse (lambda Unknown[] Unknown (lambda Unknown (do Unknown)) (lambda Unknown (do Unknown)) (lambda Unknown Unknown[] (do Unknown)) (do Unknown[])))
(the lisp:parse (lambda Unknown[] (do Unknown[])))
(the lisp:eval (lambda Unknown[] (do Unknown)))