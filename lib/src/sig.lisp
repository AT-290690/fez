(the math:reverse (lambda Number[] (do Number[])))
(the math:map (lambda Number[] (lambda Number (do Number)) (do Number[])))
(the math:select (lambda Number[] (lambda Number (do Boolean)) (do Number[])))
(the math:exclude (lambda Number[] (lambda Number (do Boolean)) (do Number[])))
(the math:fold (lambda Number[] (lambda Number Number (do Number)) Number (do Number)))
(the math:enumerated-map (lambda Number[] (lambda Number Number (do Number)) (do Number[])))
(the math:enumerated-fold (lambda Number[] (lambda Number Number Number (do Number)) Number (do Number)))
(the math:every? (lambda Number[] (lambda Number (do Boolean)) (do Boolean)))
(the math:some? (lambda Number[] (lambda Number (do Boolean)) (do Boolean)))
(the math:enumerated-every? (lambda Number[] (lambda Number Number (do Boolean)) (do Boolean)))
(the math:enumerated-some? (lambda Number[] (lambda Number Number (do Boolean)) (do Boolean)))
(the math:enumerated-select (lambda Number[] (lambda Number Number (do Boolean)) (do Number[])))
(the math:enumerated-exclude (lambda Number[] (lambda Number Number (do Boolean)) (do Number[])))
(the math:log-taylor-series (lambda Number Number (do Number)))
(the math:collatz (lambda Number (do Number[])))
(the math:maximum-index (lambda Number[] (do Number)))
(the math:minimum-index (lambda Number[] (do Number)))
(the math:var-def (lambda Number (do Number[])))
(the math:var-get (lambda Number[] (do Number)))
(the math:var-set! (lambda Number[] Number (do Number[])))
(the math:var-del! (lambda Number[] (do Number[])))
(the math:var-set-and-get! (lambda Number[] Number (do Number)))
(the math:var-increment! (lambda Number[] (do Number[])))
(the math:var-decrement! (lambda Number[] (do Number[])))
(the math:var-increment-and-get! (lambda Number[] (do Number)))
(the math:var-decrement-and-get! (lambda Number[] (do Number)))
(the math:var-add! (lambda Number[] Number (do Number[])))
(the math:var-subtract! (lambda Number[] Number (do Number[])))
(the math:var-multiply! (lambda Number[] Number (do Number[])))
(the math:var-divide! (lambda Number[] Number (do Number[])))
(the math:var-add-and-get! (lambda Number[] Number (do Number)))
(the math:var-subtract-and-get! (lambda Number[] Number (do Number)))
(the math:var-multiply-and-get! (lambda Number[] Number (do Number)))
(the math:var-divide-and-get! (lambda Number[] Number (do Number)))
(the math:max-sub-array-sum (lambda Number[] (do Number)))
(the math:median (lambda Number[] (do Number)))
(the math:mean (lambda Number[] (do Number)))
(the math:subset (lambda Unknown[] (do Unknown[][])))
(the math:permutations (lambda Unknown[] (do Unknown[][])))
(the math:combinations (lambda Unknown[] (do Unknown[][])))
(the math:combinations-n (lambda Unknown[] Number (do Unknown[][])))
(the math:variants (lambda Unknown[] Number (do Unknown[][])))
(the math:unique (lambda Number[] (do Number[])))
(the math:divisors (lambda Number (do Number[])))
(the math:remove-leading-zeroes (lambda Number[] (do Number[])))
(the math:sort (lambda Number[] (lambda Number Number (do Boolean)) (do Number[])))
(the math:flat-one (lambda Number[][] (do Number[])))

(the matrix:zeroes (lambda Number Number (do Number[][])))
(the matrix:ones (lambda Number Number (do Number[][])))
(the matrix:find-index (lambda Unknown[] (lambda Unknown (do Boolean)) (do Number[])))
(the matrix:points (lambda Unknown[] (lambda Unknown (do Boolean)) (do Number[][])))

(the var:def (lambda Any (do Unknown[])))
(the var:get (lambda Unknown[] (do Any)))
(the var:set! (lambda Unknown[] Any (do Unknown[])))
(the var:del! (lambda Unknown[] (do Unknown[])))
(the var:set-and-get! (lambda Unknown[] Any (do Any)))

(the array:first (lambda Unknown[] (do Any)))
(the array:second (lambda Unknown[] (do Any)))
(the array:third (lambda Unknown[] (do Any)))
(the array:last (lambda Unknown[] (do Any)))
(the array:get (lambda Unknown[] Number (do Any)))
(the array:get-number (lambda Number[] Number (do Number)))
(the array:get-nested-number-1 (lambda Number[][] Number (do Number[])))
(the array:get-nested-number-2 (lambda Number[][][] Number (do Number[][])))

(the array:get-array (lambda Unknown[][] Number (do Unknown[])))
(the array:get-nested-array-1 (lambda Unknown[][] Number (do Unknown[])))
(the array:get-nested-array-2 (lambda Unknown[][][] Number (do Unknown[][])))

(the array:get-boolean (lambda Boolean[] Number (do Boolean)))
(the array:get-nested-boolean-1 (lambda Boolean[][] Number (do Boolean[])))
(the array:get-nested-boolean-2 (lambda Boolean[][][] Number (do Boolean[][])))

(the array:transform (lambda Unknown[] (lambda Unknown[] Unknown (do Unknown)) Unknown[] (do Unknown[])))
(the array:reduce (lambda Unknown[] (lambda Number Unknown (do Number)) Number (do Number)))
(the array:enumerated-reduce (lambda Unknown[] (lambda Number Unknown Number (do Number)) Number (do Number)))
(the array:zip (lambda Unknown[] Unknown[] (do Unknown[][])))
(the array:unzip (lambda Unknown[] (do Unknown[][]))) 

(the array:set! (lambda Unknown[] Number Any (do Unknown[])))
(the array:push! (lambda Unknown[] Any (do Any)))
(the array:append! (lambda Unknown[] Any (do Unknown[])))
(the array:fold (lambda Unknown[] (lambda Unknown Unknown (do Any)) Unknown (do Unknown)))
(the list:fold (lambda Unknown[] (lambda Unknown Unknown (do Any)) Unknown (do Unknown)))

(the bools:fold (lambda Boolean[] (lambda Boolean Boolean (do Boolean)) Boolean (do Boolean)))
(the bools:map (lambda Boolean[] (lambda Boolean (do Boolean)) (do Boolean[])))
(the bools:select (lambda Boolean[] (lambda Boolean (do Boolean)) (do Boolean[])))
(the bools:exclude (lambda Boolean[] (lambda Boolean (do Boolean)) (do Boolean[])))

(the boole:def-strict (lambda Boolean (do Boolean[])))
(the boole:get (lambda Boolean[] (do Boolean)))
(the boole:set! (lambda Boolean[] Boolean (do Boolean[])))
(the boole:toggle! (lambda Boolean[] (do Boolean[])))
(the boole:true! (lambda Boolean[] (do Boolean[])))
(the boole:false! (lambda Boolean[] (do Boolean[])))
(the boole:true? (lambda Boolean[] (do Boolean)))
(the boole:false? (lambda Boolean[] (do Boolean)))

(the from:string->array (lambda Number[] Number (do Unknown[][])))
(the from:array->string (lambda Unknown[][] Number (do Number[])))
(the from:strings->integers (lambda Unknown[][] (do Number[])))
(the from:string->integer (lambda Number[] (do Number)))
(the from:integer->string (lambda Number (do Number[])))
(the from:strings->floats (lambda Unknown[][] (do Number[])))
(the from:string->float (lambda Number[] (do Number)))
(the from:float->string (lambda Number (do Number[])))
(the from:chars->digits (lambda Number[] (do Number[])))
(the from:digits->chars (lambda Number[] (do Number[])))
(the from:digits->integer (lambda Number[] (do Number)))
(the from:integer->digits (lambda Number (do Number[])))
(the from:chars->set (lambda Number[] (do Number[][])))

(the identity (lambda T (do T)))