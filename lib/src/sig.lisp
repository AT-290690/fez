(let math:map (lambda Number[] (lambda Number (do Number)) (do Number[])))
(let math:select (lambda Number[] (lambda Number (do Boolean)) (do Number[])))
(let math:exclude (lambda Number[] (lambda Number (do Boolean)) (do Number[])))
(let math:fold (lambda Number[] (lambda Number Number (do Number)) Number (do Number)))
(let math:enumerated-fold (lambda Number[] (lambda Number Number Number (do Number)) (do Number)))
(let math:maximum-index (lambda Number[] (do Number)))
(let math:minimum-index (lambda Number[] (do Number)))
(let math:var-def (lambda Number (do Number[])))
(let math:var-get (lambda Number[] (do Number)))
(let math:var-set! (lambda Number[] Number (do Number[])))
(let math:var-del! (lambda Number[] (do Number[])))
(let math:var-set-and-get! (lambda Number[] Number (do Number)))
(let math:var-increment! (lambda Number[] (do Number[])))
(let math:var-decrement! (lambda Number[] (do Number[])))
(let math:var-increment-and-get! (lambda Number[] (do Number)))
(let math:var-decrement-and-get! (lambda Number[] (do Number)))
(let math:max-sub-array-sum (lambda Number[] (do Number)))
(let math:median (lambda Number[] (do Number)))
(let math:mean (lambda Number[] (do Number)))

(let var:def (lambda Any (do Unknown[])))
(let var:get (lambda Unknown[] (do Any)))
(let var:set! (lambda Unknown[] Any (do Unknown[])))
(let var:del! (lambda Unknown[] (do Unknown[])))
(let var:set-and-get! (lambda Unknown[] Any (do Any)))

(let array:first (lambda Unknown[] (do Any)))
(let array:second (lambda Unknown[] (do Any)))
(let array:third (lambda Unknown[] (do Any)))
(let array:last (lambda Unknown[] (do Any)))

(let array:transform (lambda Unknown[] (lambda Unknown[] Unknown (do Unknown)) Unknown[] (do Unknown[])))
(let array:reduce (lambda Unknown[] (lambda Number Unknown (do Number)) Number (do Number)))
(let array:enumerated-reduce (lambda Unknown[] (lambda Number Unknown Number (do Number)) Number (do Number)))
(let array:zip (lambda Unknown[] Unknown[] (do Unknown[][])))

(let bools:fold (lambda Boolean[] (lambda Boolean Boolean (do Boolean)) Boolean (do Boolean)))
(let math:unique (lambda Number[] (do Number[])))
