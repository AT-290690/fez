(let math:map (lambda Numbers (lambda Number (do Number)) (do Numbers)))
(let math:select (lambda Numbers (lambda Number (do Boolean)) (do Numbers)))
(let math:exclude (lambda Numbers (lambda Number (do Boolean)) (do Numbers)))
(let math:fold (lambda Numbers (lambda Number Number (do Number)) Number (do Number)))
(let math:enumerated-fold (lambda Numbers (lambda Number Number Number (do Number)) (do Number)))
(let math:maximum-index (lambda Numbers (do Number)))
(let math:minimum-index (lambda Numbers (do Number)))
(let math:var-def (lambda Number (do Numbers)))
(let math:var-get (lambda Numbers (do Number)))
(let math:var-set! (lambda Numbers Number (do Numbers)))
(let math:var-del! (lambda Numbers (do Numbers)))
(let math:var-set-and-get! (lambda Numbers Number (do Number)))
(let math:var-increment! (lambda Numbers (do Numbers)))
(let math:var-decrement! (lambda Numbers (do Numbers)))
(let math:var-increment-and-get! (lambda Numbers (do Number)))
(let math:var-decrement-and-get! (lambda Numbers (do Number)))
(let math:max-sub-array-sum (lambda Numbers (do Number)))
(let math:median (lambda Numbers (do Number)))
(let math:mean (lambda Numbers (do Number)))

(let var:def (lambda Any (do Unknowns)))
(let var:get (lambda Unknowns (do Any)))
(let var:set! (lambda Unknowns Any (do Unknowns)))
(let var:del! (lambda Unknowns (do Unknowns)))
(let var:set-and-get! (lambda Unknowns Any (do Any)))

(let array:first (lambda Unknowns (do Any)))
(let array:second (lambda Unknowns (do Any)))
(let array:third (lambda Unknowns (do Any)))
(let array:last (lambda Unknowns (do Any)))

(let array:transform (lambda Unknowns (lambda Unknowns Unknown (do Unknown)) Unknowns (do Unknowns)))
(let array:reduce (lambda Unknowns (lambda Number Unknown (do Number)) Number (do Number)))
(let array:enumerated-reduce (lambda Unknowns (lambda Number Unknown Number (do Number)) Number (do Number)))

(let bools:fold (lambda Booleans (lambda Boolean Boolean (do Boolean)) Boolean (do Boolean)))
(let math:unique (lambda Numbers (do Numbers)))
